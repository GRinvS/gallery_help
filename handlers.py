from telebot import types
from database import Database
from utilss import ImageRecognition, generate_qr_code, get_keyboard_markup
from config import ROLES, EXCEL_FILES
import os
import pandas as pd
from detect import run

class Handlers:
    def __init__(self, bot):
        self.bot = bot
        self.db = Database()
        self.image_recognition = ImageRecognition()
        self.user_states = {}

    def start(self, message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user_id = message.from_user.id
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É (–µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç)
        self.db.add_user(user_id)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        buttons = [
            "üìö –ö–∞—Ç–∞–ª–æ–≥ —Ö—É–¥–æ–∂–Ω–∏–∫–æ–≤",
            "üñº –ö–∞—Ç–∞–ª–æ–≥ –∫–∞—Ä—Ç–∏–Ω",
            "üîç –ù–∞–π—Ç–∏ –∫–∞—Ä—Ç–∏–Ω—É –ø–æ —Ñ–æ—Ç–æ",
            "üìù –û—Ç–∑—ã–≤—ã –æ –≥–∞–ª–µ—Ä–µ–µ",
            "‚ùì –ü–æ–º–æ—â—å"
        ]
        
        markup = get_keyboard_markup(buttons)
        
        welcome_text = """
        –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ì–∞–ª–µ—Ä–µ—é –ò—Å–∫—É—Å—Å—Ç–≤! üé®
        
        –Ø –ø–æ–º–æ–≥—É –≤–∞–º —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –∫–∞—Ä—Ç–∏–Ω–∞—Ö –∏ —Ö—É–¥–æ–∂–Ω–∏–∫–∞—Ö.
        –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.
        
        –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
        /start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
        /help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
        /gallery_reviews - –ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–∑—ã–≤—ã –æ –≥–∞–ª–µ—Ä–µ–µ
        /add_gallery_review - –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –æ –≥–∞–ª–µ—Ä–µ–µ
        """
        
        self.bot.send_message(message.chat.id, welcome_text, reply_markup=markup)

    def request_role(self, message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–æ–ª–∏"""
        user_id = message.from_user.id
        current_role = self.db.get_user_role(user_id)
        
        if current_role in ['admin', 'curator']:
            self.bot.reply_to(message, "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –ø—Ä–∏–≤–∏–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ä–æ–ª—å.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        users_df = pd.read_excel(EXCEL_FILES['users'])
        admins = users_df[users_df['role'] == 'admin']
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
        admin_message = f"""
        –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–æ–ª–∏:
        –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{message.from_user.username}
        ID: {user_id}
        –¢–µ–∫—É—â–∞—è —Ä–æ–ª—å: {current_role}
        """
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
        for _, admin in admins.iterrows():
            try:
                self.bot.send_message(admin['user_id'], admin_message)
            except:
                continue
        
        self.bot.reply_to(message, "–í–∞—à –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")

    def show_artists(self, message, page=1):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ç–∞–ª–æ–≥ —Ö—É–¥–æ–∂–Ω–∏–∫–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
        artists = self.db.get_artists()
        if artists.empty:
            self.bot.reply_to(message, "–í –∫–∞—Ç–∞–ª–æ–≥–µ –ø–æ–∫–∞ –Ω–µ—Ç —Ö—É–¥–æ–∂–Ω–∏–∫–æ–≤.")
            return
        
        # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
        per_page = 5
        total_pages = (len(artists) + per_page - 1) // per_page
        
        # –ü–æ–ª—É—á–∞–µ–º —Ö—É–¥–æ–∂–Ω–∏–∫–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        start_idx = (page - 1) * per_page
        end_idx = start_idx + per_page
        page_artists = artists.iloc[start_idx:end_idx]
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ö—É–¥–æ–∂–Ω–∏–∫–∞
        markup = types.InlineKeyboardMarkup()
        for _, artist in page_artists.iterrows():
            button = types.InlineKeyboardButton(
                text=f"üé® {artist['name']}",
                callback_data=f"artist_{artist['id']}"
            )
            markup.add(button)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        nav_buttons = []
        if page > 1:
            nav_buttons.append(types.InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                callback_data=f"artists_page_{page-1}"
            ))
        if page < total_pages:
            nav_buttons.append(types.InlineKeyboardButton(
                text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è",
                callback_data=f"artists_page_{page+1}"
            ))
        if nav_buttons:
            markup.add(*nav_buttons)
        
        text = f"–í—ã–±–µ—Ä–∏—Ç–µ —Ö—É–¥–æ–∂–Ω–∏–∫–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∏–∑ {total_pages}):"
        
        if isinstance(message, types.CallbackQuery):
            self.bot.edit_message_text(
                text,
                message.message.chat.id,
                message.message.message_id,
                reply_markup=markup
            )
        else:
            self.bot.send_message(
                message.chat.id,
                text,
                reply_markup=markup
            )

    def show_artist_details(self, call):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ö—É–¥–æ–∂–Ω–∏–∫–µ"""
        artist_id = int(call.data.split('_')[1])
        artist = self.db.get_artist(artist_id)
        
        text = f"""
üé® –•—É–¥–æ–∂–Ω–∏–∫: {artist['name']}
üìù –ë–∏–æ–≥—Ä–∞—Ñ–∏—è: {artist['biography']}
üé≠ –°—Ç–∏–ª—å: {artist['style']}
        """
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–∞—Ä—Ç–∏–Ω —Ö—É–¥–æ–∂–Ω–∏–∫–∞
        markup = types.InlineKeyboardMarkup()
        paintings_button = types.InlineKeyboardButton(
            text="üñº –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞—Ä—Ç–∏–Ω—ã",
            callback_data=f"artist_paintings_{artist_id}"
        )
        markup.add(paintings_button)
        
        self.bot.edit_message_text(
            text,
            call.message.chat.id,
            call.message.message_id,
            reply_markup=markup
        )

    def show_paintings(self, message, page=1):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ç–∞–ª–æ–≥ –∫–∞—Ä—Ç–∏–Ω —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
        paintings = self.db.get_paintings()
        if paintings.empty:
            self.bot.reply_to(message, "–í –∫–∞—Ç–∞–ª–æ–≥–µ –ø–æ–∫–∞ –Ω–µ—Ç –∫–∞—Ä—Ç–∏–Ω.")
            return
        
        # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
        per_page = 5
        total_pages = (len(paintings) + per_page - 1) // per_page
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ä—Ç–∏–Ω—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        start_idx = (page - 1) * per_page
        end_idx = start_idx + per_page
        page_paintings = paintings.iloc[start_idx:end_idx]
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ä—Ç–∏–Ω—ã
        markup = types.InlineKeyboardMarkup()
        for _, painting in page_paintings.iterrows():
            button = types.InlineKeyboardButton(
                text=f"üñº {painting['title']}",
                callback_data=f"painting_{painting['id']}"
            )
            markup.add(button)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        nav_buttons = []
        if page > 1:
            nav_buttons.append(types.InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                callback_data=f"paintings_page_{page-1}"
            ))
        if page < total_pages:
            nav_buttons.append(types.InlineKeyboardButton(
                text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è",
                callback_data=f"paintings_page_{page+1}"
            ))
        if nav_buttons:
            markup.add(*nav_buttons)
        
        text = f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç–∏–Ω—É –∏–∑ —Å–ø–∏—Å–∫–∞ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∏–∑ {total_pages}):"
        
        if isinstance(message, types.CallbackQuery):
            self.bot.edit_message_text(
                text,
                message.message.chat.id,
                message.message.message_id,
                reply_markup=markup
            )
        else:
            self.bot.send_message(
                message.chat.id,
                text,
                reply_markup=markup
            )

    def show_painting_details(self, call):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∫–∞—Ä—Ç–∏–Ω—ã"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º ID –∫–∞—Ä—Ç–∏–Ω—ã –∏–∑ callback –¥–∞–Ω–Ω—ã—Ö
            data_parts = call.data.split('_')
            
            # –ï—Å–ª–∏ —ç—Ç–æ –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –∫–∞—Ä—Ç–∏–Ω
            if call.data == "paintings":
                self.show_paintings(call.message)
                return
            
            if len(data_parts) < 2:
                return
                
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
            painting_id = None
            page = 1
                
            if data_parts[0] == 'painting':
                if len(data_parts) == 2:  # –§–æ—Ä–º–∞—Ç: painting_1
                    try:
                        painting_id = int(data_parts[1])
                    except ValueError:
                        return
                elif len(data_parts) >= 3 and data_parts[1] == 'reviews':
                    try:
                        painting_id = int(data_parts[2])
                        if len(data_parts) > 3:
                            page = int(data_parts[3])
                    except ValueError:
                        return
                else:
                    return
            else:
                return
                
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ä—Ç–∏–Ω–µ
            painting = self.db.get_painting(painting_id)
            if painting is None:
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–∑—ã–≤—ã —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
            reviews, total_pages = self.db.get_reviews(painting_id, page=page)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–∞—Ä—Ç–∏–Ω–µ
            message = f"üé® {painting['title']}\n\n"
            message += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {painting['description']}\n"
            message += f"üìÖ –ì–æ–¥ —Å–æ–∑–¥–∞–Ω–∏—è: {painting['year']}\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–∑—ã–≤—ã
            if not reviews.empty:
                message += "\nüìù –û—Ç–∑—ã–≤—ã:\n"
                for _, review in reviews.iterrows():
                    role = review.get('role', 'visitor')
                    role_emoji = 'üë®‚Äçüè´' if role == 'guide' else 'üë§'
                    message += f"\n{role_emoji} {review['text']}\n"
                    message += f"‚≠êÔ∏è –û—Ü–µ–Ω–∫–∞: {review['rating']}/5\n"
                    message += f"üìÖ {review['date'].strftime('%d.%m.%Y')}\n"
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard = types.InlineKeyboardMarkup(row_width=2)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –æ—Ç–∑—ã–≤–∞–º
            if total_pages > 1:
                nav_buttons = []
                if page > 1:
                    nav_buttons.append(types.InlineKeyboardButton(
                        "‚óÄÔ∏è", callback_data=f"painting_reviews_{painting_id}_{page-1}"
                    ))
                if page < total_pages:
                    nav_buttons.append(types.InlineKeyboardButton(
                        "‚ñ∂Ô∏è", callback_data=f"painting_reviews_{painting_id}_{page+1}"
                    ))
                if nav_buttons:
                    keyboard.add(*nav_buttons)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
            keyboard.add(
                types.InlineKeyboardButton("üìù –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", callback_data=f"review_{painting_id}"),
                types.InlineKeyboardButton("üì± –ü–æ–ª—É—á–∏—Ç—å QR-–∫–æ–¥", callback_data=f"qr_{painting_id}")
            )
            keyboard.add(types.InlineKeyboardButton("üîô –ö —Å–ø–∏—Å–∫—É –∫–∞—Ä—Ç–∏–Ω", callback_data="paintings"))
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            image_path = painting.get('image_path')
            
            if image_path and pd.notna(image_path):
                # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
                full_image_path = os.path.join('images', image_path)
                
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
                    if not os.path.exists(full_image_path):
                        raise FileNotFoundError(f"Image file not found: {full_image_path}")
                    
                    with open(full_image_path, 'rb') as photo:
                        self.bot.send_photo(
                            call.message.chat.id,
                            photo,
                            caption=message,
                            reply_markup=keyboard
                        )
                    
                    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    self.bot.delete_message(call.message.chat.id, call.message.message_id)
                except Exception:
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                    self.bot.edit_message_text(
                        chat_id=call.message.chat.id,
                        message_id=call.message.message_id,
                        text=message,
                        reply_markup=keyboard
                    )
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç –ø—É—Ç–∏ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                self.bot.edit_message_text(
                    chat_id=call.message.chat.id,
                    message_id=call.message.message_id,
                    text=message,
                    reply_markup=keyboard
                )
                
        except Exception:
            return

    def show_artist_paintings(self, call):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ö—É–¥–æ–∂–Ω–∏–∫–∞"""
        artist_id = int(call.data.split('_')[2])
        paintings = self.db.get_paintings()
        artist_paintings = paintings[paintings['artist_id'] == artist_id]
        
        if artist_paintings.empty:
            self.bot.answer_callback_query(
                call.id,
                "–£ —ç—Ç–æ–≥–æ —Ö—É–¥–æ–∂–Ω–∏–∫–∞ –ø–æ–∫–∞ –Ω–µ—Ç –∫–∞—Ä—Ç–∏–Ω –≤ –∫–∞—Ç–∞–ª–æ–≥–µ."
            )
            return
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞—Ä—Ç–∏–Ω —Ö—É–¥–æ–∂–Ω–∏–∫–∞
        markup = types.InlineKeyboardMarkup()
        for _, painting in artist_paintings.iterrows():
            button = types.InlineKeyboardButton(
                text=f"üñº {painting['title']}",
                callback_data=f"painting_{painting['id']}"
            )
            markup.add(button)
        
        self.bot.edit_message_text(
            "–ö–∞—Ä—Ç–∏–Ω—ã —Ö—É–¥–æ–∂–Ω–∏–∫–∞:",
            call.message.chat.id,
            call.message.message_id,
            reply_markup=markup
        )

    def handle_photo(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–∞—Ä—Ç–∏–Ω—ã"""
        
        file_info = self.bot.get_file(message.photo[0].file_id)
        downloaded_file = self.bot.download_file(file_info.file_path)
        with open("image.jpg","wb") as f:
            f.write(downloaded_file)
        p_id = run(source="image.jpg")

        if(p_id is None):
            self.bot.reply_to(message,"–û—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –∫–∞–∫ —Ñ–∞–π–ª")
            return

        p_db = pd.read_excel("data/paintings.xlsx")
        a_db = pd.read_excel("data/artists.xlsx")

        p_row = p_db[p_db['id'] == p_id].iloc[0]
        a_row = a_db[a_db['id'] == p_row['artist_id']].iloc[0]

        result = f"\"{p_row['title']}\" - {a_row['name']}, {p_row['year']}\n\n{p_row['description']}"
        self.bot.reply_to(message,result)

    def add_review(self, message):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞"""
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞
        pass

    def help_command(self, message):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = message.from_user.id
        user_role = self.db.get_user_role(user_id)
        
        if user_role in ['admin', 'curator']:
            help_text = """
ü§ñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏ –∫—É—Ä–∞—Ç–æ—Ä–æ–≤:

–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/request_role - –ó–∞–ø—Ä–æ—Å–∏—Ç—å —Ä–æ–ª—å –∫—É—Ä–∞—Ç–æ—Ä–∞ –∏–ª–∏ —ç–∫—Å–∫—É—Ä—Å–æ–≤–æ–¥–∞
/add_gallery_review - –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –æ –≥–∞–ª–µ—Ä–µ–µ

–ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:
/add_artist - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ —Ö—É–¥–æ–∂–Ω–∏–∫–∞
/edit_artist - –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ö—É–¥–æ–∂–Ω–∏–∫–µ
/delete_artist - –£–¥–∞–ª–∏—Ç—å —Ö—É–¥–æ–∂–Ω–∏–∫–∞
/add_painting - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∫–∞—Ä—Ç–∏–Ω—É
/edit_painting - –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ä—Ç–∏–Ω–µ
/delete_painting - –£–¥–∞–ª–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω—É
/delete_review - –£–¥–∞–ª–∏—Ç—å –æ—Ç–∑—ã–≤ –æ –∫–∞—Ä—Ç–∏–Ω–µ
/delete_gallery_review - –£–¥–∞–ª–∏—Ç—å –æ—Ç–∑—ã–≤ –æ –≥–∞–ª–µ—Ä–µ–µ

–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
- –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–∞—Ç–∞–ª–æ–≥–∞ —Ö—É–¥–æ–∂–Ω–∏–∫–æ–≤
- –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–∞—Ç–∞–ª–æ–≥–∞ –∫–∞—Ä—Ç–∏–Ω
- –ü–æ–∏—Å–∫ –∫–∞—Ä—Ç–∏–Ω—ã –ø–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
- –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤–æ–≤
- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR-–∫–æ–¥–æ–≤ –¥–ª—è –∫–∞—Ä—Ç–∏–Ω
"""
        else:
            help_text = """
ü§ñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –¥–ª—è –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π:

–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/add_gallery_review - –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –æ –≥–∞–ª–µ—Ä–µ–µ

–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
- –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–∞—Ç–∞–ª–æ–≥–∞ —Ö—É–¥–æ–∂–Ω–∏–∫–æ–≤
- –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–∞—Ç–∞–ª–æ–≥–∞ –∫–∞—Ä—Ç–∏–Ω
- –ü–æ–∏—Å–∫ –∫–∞—Ä—Ç–∏–Ω—ã –ø–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
- –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤–æ–≤
- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR-–∫–æ–¥–æ–≤ –¥–ª—è –∫–∞—Ä—Ç–∏–Ω
"""
        
        self.bot.reply_to(message, help_text)

    def handle_review_callback(self, call):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É '–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤'"""
        painting_id = int(call.data.split('_')[1])
        user_id = call.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Å—Ç–∞–≤–ª—è–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –æ—Ç–∑—ã–≤
        reviews_df = pd.read_excel(EXCEL_FILES['reviews'])
        if not reviews_df[(reviews_df['user_id'] == user_id) & 
                         (reviews_df['painting_id'] == painting_id)].empty:
            self.bot.answer_callback_query(
                call.id,
                "–í—ã —É–∂–µ –æ—Å—Ç–∞–≤–∏–ª–∏ –æ—Ç–∑—ã–≤ –Ω–∞ —ç—Ç—É –∫–∞—Ä—Ç–∏–Ω—É",
                show_alert=True
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.user_states[user_id] = {
            'state': 'waiting_review',
            'painting_id': painting_id
        }
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ü–µ–Ω–∫–∏
        markup = types.InlineKeyboardMarkup()
        for rating in range(1, 6):
            button = types.InlineKeyboardButton(
                text=f"{'‚≠ê' * rating}",
                callback_data=f"rating_{rating}"
            )
            markup.add(button)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        self.bot.send_message(
            call.message.chat.id,
            "–û—Ü–µ–Ω–∏—Ç–µ –∫–∞—Ä—Ç–∏–Ω—É –æ—Ç 1 –¥–æ 5 –∑–≤–µ–∑–¥:",
            reply_markup=markup
        )
        
        # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query
        self.bot.answer_callback_query(call.id)

    def handle_rating_callback(self, call):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –æ—Ü–µ–Ω–∫–∏"""
        rating = int(call.data.split('_')[1])
        user_id = call.from_user.id
        
        if user_id not in self.user_states:
            self.bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ü–µ–Ω–∫—É
        self.user_states[user_id]['rating'] = rating
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–∑—ã–≤
        self.bot.edit_message_text(
            "–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤ –æ –∫–∞—Ä—Ç–∏–Ω–µ:",
            call.message.chat.id,
            call.message.message_id
        )
        
        # –ú–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        self.user_states[user_id]['state'] = 'waiting_comment'

    def handle_review_text(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç–∑—ã–≤–∞"""
        user_id = message.from_user.id
        
        if user_id not in self.user_states or self.user_states[user_id]['state'] != 'waiting_comment':
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        painting_id = self.user_states[user_id]['painting_id']
        rating = self.user_states[user_id]['rating']
        comment = message.text
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–∑—ã–≤ –≤ –±–∞–∑—É
        if self.db.add_review(user_id, painting_id, comment, rating):
            self.bot.reply_to(message, "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! üåü")
        else:
            self.bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        del self.user_states[user_id]

    def handle_qr_callback(self, call):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É '–ü–æ–ª—É—á–∏—Ç—å QR-–∫–æ–¥'"""
        painting_id = int(call.data.split('_')[1])
        painting = self.db.get_painting(painting_id)
        artist = self.db.get_artist(painting['artist_id'])
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è QR-–∫–æ–¥–∞
        painting_data = {
            'id': painting['id'],
            'title': painting['title'],
            'artist_name': artist['name'],
            'year': painting['year'],
            'description': painting['description']
        }
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR-–∫–æ–¥
        qr_path = generate_qr_code(painting_data, painting['image_path'])
        
        if qr_path and os.path.exists(qr_path):
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º QR-–∫–æ–¥
            with open(qr_path, 'rb') as qr_file:
                self.bot.send_photo(
                    call.message.chat.id,
                    qr_file,
                    caption=f"QR-–∫–æ–¥ –¥–ª—è –∫–∞—Ä—Ç–∏–Ω—ã '{painting['title']}'"
                )
        else:
            self.bot.answer_callback_query(
                call.id,
                "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–∞",
                show_alert=True
            )

    def show_gallery_reviews(self, message, page=1):
        """–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–∑—ã–≤—ã –æ –≥–∞–ª–µ—Ä–µ–µ"""
        reviews, total_pages = self.db.get_gallery_reviews(page)
        
        if reviews.empty:
            self.bot.reply_to(message, "–ü–æ–∫–∞ –Ω–µ—Ç –æ—Ç–∑—ã–≤–æ–≤ –æ –≥–∞–ª–µ—Ä–µ–µ.")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –æ—Ç–∑—ã–≤–∞–º–∏
        text = f"üìù –û—Ç–∑—ã–≤—ã –æ –≥–∞–ª–µ—Ä–µ–µ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∏–∑ {total_pages}):\n\n"
        for _, review in reviews.iterrows():
            if review['role'] == 'guide':
                text += f"üë®‚Äçüè´ *–û—Ç–∑—ã–≤ —ç–∫—Å–∫—É—Ä—Å–æ–≤–æ–¥–∞*\n"
            text += f"{'‚≠ê' * review['rating']}\n{review['text']}\n\n"
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        markup = types.InlineKeyboardMarkup()
        nav_buttons = []
        if page > 1:
            nav_buttons.append(types.InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                callback_data=f"gallery_reviews_{page-1}"
            ))
        if page < total_pages:
            nav_buttons.append(types.InlineKeyboardButton(
                text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è",
                callback_data=f"gallery_reviews_{page+1}"
            ))
        if nav_buttons:
            markup.add(*nav_buttons)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞
        add_review_button = types.InlineKeyboardButton(
            text="üìù –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤",
            callback_data="add_gallery_review"
        )
        markup.add(add_review_button)
        
        if isinstance(message, types.CallbackQuery):
            self.bot.edit_message_text(
                text,
                message.message.chat.id,
                message.message.message_id,
                reply_markup=markup,
                parse_mode='Markdown'
            )
        else:
            self.bot.send_message(
                message.chat.id,
                text,
                reply_markup=markup,
                parse_mode='Markdown'
            )

    def handle_gallery_review_callback(self, call):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É '–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –æ –≥–∞–ª–µ—Ä–µ–µ'"""
        user_id = call.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Å—Ç–∞–≤–ª—è–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –æ—Ç–∑—ã–≤
        reviews_df = pd.read_excel(EXCEL_FILES['gallery_reviews'])
        if not reviews_df[reviews_df['user_id'] == user_id].empty:
            self.bot.answer_callback_query(
                call.id,
                "–í—ã —É–∂–µ –æ—Å—Ç–∞–≤–∏–ª–∏ –æ—Ç–∑—ã–≤ –æ –≥–∞–ª–µ—Ä–µ–µ",
                show_alert=True
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.user_states[user_id] = {
            'state': 'waiting_gallery_review'
        }
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ü–µ–Ω–∫–∏
        markup = types.InlineKeyboardMarkup()
        for rating in range(1, 6):
            button = types.InlineKeyboardButton(
                text=f"{'‚≠ê' * rating}",
                callback_data=f"gallery_rating_{rating}"
            )
            markup.add(button)
        
        self.bot.edit_message_text(
            "–û—Ü–µ–Ω–∏—Ç–µ –≥–∞–ª–µ—Ä–µ—é –æ—Ç 1 –¥–æ 5 –∑–≤–µ–∑–¥:",
            call.message.chat.id,
            call.message.message_id,
            reply_markup=markup
        )

    def handle_gallery_rating_callback(self, call):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –æ—Ü–µ–Ω–∫–∏ –¥–ª—è –æ—Ç–∑—ã–≤–∞ –æ –≥–∞–ª–µ—Ä–µ–µ"""
        rating = int(call.data.split('_')[2])
        user_id = call.from_user.id
        
        if user_id not in self.user_states:
            self.bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ü–µ–Ω–∫—É
        self.user_states[user_id]['rating'] = rating
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–∑—ã–≤
        self.bot.edit_message_text(
            "–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤ –æ –≥–∞–ª–µ—Ä–µ–µ:",
            call.message.chat.id,
            call.message.message_id
        )
        
        # –ú–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        self.user_states[user_id]['state'] = 'waiting_gallery_comment'

    def handle_gallery_review_text(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç–∑—ã–≤–∞ –æ –≥–∞–ª–µ—Ä–µ–µ"""
        user_id = message.from_user.id
        
        if user_id not in self.user_states or self.user_states[user_id]['state'] != 'waiting_gallery_comment':
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        rating = self.user_states[user_id]['rating']
        comment = message.text
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–∑—ã–≤ –≤ –±–∞–∑—É
        if self.db.add_gallery_review(user_id, comment, rating):
            self.bot.reply_to(message, "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤ –æ –≥–∞–ª–µ—Ä–µ–µ! üåü")
        else:
            self.bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        del self.user_states[user_id]

    def handle_text(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        if message.text == "üìö –ö–∞—Ç–∞–ª–æ–≥ —Ö—É–¥–æ–∂–Ω–∏–∫–æ–≤":
            self.show_artists(message)
        elif message.text == "üñº –ö–∞—Ç–∞–ª–æ–≥ –∫–∞—Ä—Ç–∏–Ω":
            self.show_paintings(message)
        elif message.text == "üîç –ù–∞–π—Ç–∏ –∫–∞—Ä—Ç–∏–Ω—É –ø–æ —Ñ–æ—Ç–æ":
            self.bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∫–∞—Ä—Ç–∏–Ω—ã.")
        elif message.text == "üìù –û—Ç–∑—ã–≤—ã –æ –≥–∞–ª–µ—Ä–µ–µ":
            self.show_gallery_reviews(message)
        elif message.text == "‚ùì –ü–æ–º–æ—â—å":
            self.help_command(message)
        else:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_id = message.from_user.id
            if user_id in self.user_states:
                state = self.user_states[user_id]['state']
                if state == 'waiting_comment':
                    self.handle_review_text(message)
                elif state == 'waiting_gallery_comment':
                    self.handle_gallery_review_text(message)
                elif state == 'waiting_artist_name':
                    self.handle_artist_name(message)
                elif state == 'waiting_artist_biography':
                    self.handle_artist_biography(message)
                elif state == 'waiting_artist_style':
                    self.handle_artist_style(message)
                elif state == 'waiting_painting_title':
                    self.handle_painting_title(message)
                elif state == 'waiting_painting_description':
                    self.handle_painting_description(message)
                elif state == 'waiting_painting_year':
                    self.handle_painting_year(message)
                elif state == 'waiting_review_id':
                    self.handle_review_deletion(message)
                elif state == 'waiting_edit_painting_title':
                    self.handle_edit_painting_title(message)
                elif state == 'waiting_edit_painting_description':
                    self.handle_edit_painting_description(message)
                elif state == 'waiting_edit_painting_year':
                    self.handle_edit_painting_year(message)
                elif state.startswith('waiting_edit_artist_'):
                    self.handle_edit_artist_text(message)

    def handle_artist_name(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ —Ö—É–¥–æ–∂–Ω–∏–∫–∞"""
        user_id = message.from_user.id
        self.user_states[user_id]['artist_name'] = message.text
        self.user_states[user_id]['state'] = 'waiting_artist_biography'
        self.bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ –±–∏–æ–≥—Ä–∞—Ñ–∏—é —Ö—É–¥–æ–∂–Ω–∏–∫–∞:")

    def handle_artist_biography(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –±–∏–æ–≥—Ä–∞—Ñ–∏–∏ —Ö—É–¥–æ–∂–Ω–∏–∫–∞"""
        user_id = message.from_user.id
        self.user_states[user_id]['artist_biography'] = message.text
        self.user_states[user_id]['state'] = 'waiting_artist_style'
        self.bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ —Å—Ç–∏–ª—å —Ö—É–¥–æ–∂–Ω–∏–∫–∞:")

    def handle_artist_style(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—Ç–∏–ª—è —Ö—É–¥–æ–∂–Ω–∏–∫–∞"""
        user_id = message.from_user.id
        artist_data = {
            'name': self.user_states[user_id]['artist_name'],
            'biography': self.user_states[user_id]['artist_biography'],
            'style': message.text
        }
        
        if self.db.add_artist(artist_data):
            self.bot.reply_to(message, "–•—É–¥–æ–∂–Ω–∏–∫ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω! üé®")
        else:
            self.bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ö—É–¥–æ–∂–Ω–∏–∫–∞.")
        
        del self.user_states[user_id]

    def handle_painting_title(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ä—Ç–∏–Ω—ã"""
        user_id = message.from_user.id
        if user_id not in self.user_states:
            return

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é –∫–∞—Ä—Ç–∏–Ω—É
        if self.user_states[user_id].get('state') == 'waiting_painting_title':
            self.user_states[user_id]['painting_data'] = {
                'title': message.text
            }
            self.user_states[user_id]['state'] = 'waiting_painting_description'
            self.bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω—ã:")
        else:
            # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            try:
                painting_id = self.user_states[user_id]['painting_id']
                new_title = message.text

                if self.db.edit_painting(painting_id, 'title', new_title):
                    self.bot.reply_to(message, "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ! üé®")
                else:
                    self.bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è.")
            except Exception as e:
                self.bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è.")
            finally:
                del self.user_states[user_id]

    def handle_painting_description(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è –∫–∞—Ä—Ç–∏–Ω—ã"""
        user_id = message.from_user.id
        if user_id not in self.user_states:
            return

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é –∫–∞—Ä—Ç–∏–Ω—É
        if self.user_states[user_id].get('state') == 'waiting_painting_description':
            self.user_states[user_id]['painting_data']['description'] = message.text
            self.user_states[user_id]['state'] = 'waiting_painting_year'
            self.bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ –≥–æ–¥ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç–∏–Ω—ã:")
        else:
            try:
                painting_id = self.user_states[user_id]['painting_id']
                new_description = message.text
                if self.db.edit_painting(painting_id, 'description', new_description):
                    self.bot.reply_to(message, "–û–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ! üé®")
                else:
                    self.bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è.")
            except Exception as e:
                self.bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è.")
            finally:
                del self.user_states[user_id]

    def handle_painting_year(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≥–æ–¥–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç–∏–Ω—ã"""
        user_id = message.from_user.id
        if user_id not in self.user_states:
            return

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é –∫–∞—Ä—Ç–∏–Ω—É
        if self.user_states[user_id].get('state') == 'waiting_painting_year':
            try:
                new_year = int(message.text)
                self.user_states[user_id]['painting_data']['year'] = new_year
                self.user_states[user_id]['state'] = 'waiting_painting_image'
                self.bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω—ã.")
            except ValueError:
                self.bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≥–æ–¥.")
                return
        else:
            try:
                new_year = int(message.text)
                painting_id = self.user_states[user_id]['painting_id']
                if self.db.edit_painting(painting_id, 'year', new_year):
                    self.bot.reply_to(message, "–ì–æ–¥ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç–∏–Ω—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω! üé®")
                else:
                    self.bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≥–æ–¥–∞.")
            except ValueError:
                self.bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≥–æ–¥.")
                return
            except Exception as e:
                self.bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≥–æ–¥–∞.")
            finally:
                del self.user_states[user_id]

    def handle_painting_image(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ä—Ç–∏–Ω—ã"""
        user_id = message.from_user.id
        if not message.photo:
            self.bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
            return
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            file_info = self.bot.get_file(message.photo[-1].file_id)
            downloaded_file = self.bot.download_file(file_info.file_path)
            
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            os.makedirs("images", exist_ok=True)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            image_path = f"{self.user_states[user_id]['painting_data']['title']}.jpg"
            with open(image_path, 'wb') as new_file:
                new_file.write(downloaded_file)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –≤ –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç–∏–Ω—ã
            self.user_states[user_id]['painting_data']['image_path'] = image_path
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ä—Ç–∏–Ω—É –≤ –±–∞–∑—É
            if self.db.add_painting(self.user_states[user_id]['painting_data']):
                self.bot.reply_to(message, "–ö–∞—Ä—Ç–∏–Ω–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞! üñº")
            else:
                self.bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞—Ä—Ç–∏–Ω—ã.")
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            del self.user_states[user_id]
            
        except ConnectionError as e:
            self.bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        except Exception as e:
            self.bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return

    def handle_review_deletion(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞"""
        try:
            review_id = int(message.text)
            if self.db.delete_review(review_id):
                self.bot.reply_to(message, "–û—Ç–∑—ã–≤ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!")
            else:
                self.bot.reply_to(message, "–û—Ç–∑—ã–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        except ValueError:
            self.bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –æ—Ç–∑—ã–≤–∞.")
        
        del self.user_states[message.from_user.id]

    def handle_edit_artist_callback(self, call):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ö—É–¥–æ–∂–Ω–∏–∫–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        data_parts = call.data.split('_')
        
        if len(data_parts) == 3:  # edit_artist_1
            artist_id = int(data_parts[2])
            artist = self.db.get_artist(artist_id)
            
            markup = types.InlineKeyboardMarkup()
            buttons = [
                types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è", callback_data=f"edit_artist_name_{artist_id}"),
                types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –±–∏–æ–≥—Ä–∞—Ñ–∏—é", callback_data=f"edit_artist_bio_{artist_id}"),
                types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∏–ª—å", callback_data=f"edit_artist_style_{artist_id}")
            ]
            markup.add(*buttons)
            
            self.bot.edit_message_text(
                f"–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:\n\n"
                f"–ò–º—è: {artist['name']}\n"
                f"–ë–∏–æ–≥—Ä–∞—Ñ–∏—è: {artist['biography']}\n"
                f"–°—Ç–∏–ª—å: {artist['style']}",
                call.message.chat.id,
                call.message.message_id,
                reply_markup=markup
            )
        elif len(data_parts) == 4:  # edit_artist_name_1, edit_artist_bio_1, edit_artist_style_1
            field_type = data_parts[2]  # name, bio, style
            artist_id = int(data_parts[3])
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            self.user_states[call.from_user.id] = {
                'state': f'waiting_edit_artist_{field_type}',
                'artist_id': artist_id
            }
            
            field_names = {
                'name': '–∏–º—è',
                'bio': '–±–∏–æ–≥—Ä–∞—Ñ–∏—é',
                'style': '—Å—Ç–∏–ª—å'
            }
            
            self.bot.edit_message_text(
                f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ {field_names[field_type]} —Ö—É–¥–æ–∂–Ω–∏–∫–∞:",
                call.message.chat.id,
                call.message.message_id
            )

    def handle_edit_artist_text(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ö—É–¥–æ–∂–Ω–∏–∫–∞"""
        user_id = message.from_user.id
        if user_id not in self.user_states:
            return
        
        state = self.user_states[user_id]['state']
        artist_id = self.user_states[user_id]['artist_id']
        
        field_mapping = {
            'waiting_edit_artist_name': 'name',
            'waiting_edit_artist_bio': 'biography',
            'waiting_edit_artist_style': 'style'
        }
        
        field = field_mapping.get(state)
        if not field:
            return
        
        if self.db.edit_artist(artist_id, field, message.text):
            self.bot.reply_to(message, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ö—É–¥–æ–∂–Ω–∏–∫–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞! üé®")
        else:
            self.bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.")
        
        del self.user_states[user_id]

    def handle_delete_artist_callback(self, call):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ö—É–¥–æ–∂–Ω–∏–∫–∞"""
        artist_id = int(call.data.split('_')[2])
        if self.db.delete_artist(artist_id):
            self.bot.answer_callback_query(call.id, "–•—É–¥–æ–∂–Ω–∏–∫ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!")
            self.bot.edit_message_text(
                "–•—É–¥–æ–∂–Ω–∏–∫ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!",
                call.message.chat.id,
                call.message.message_id
            )
        else:
            self.bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ö—É–¥–æ–∂–Ω–∏–∫–∞.")

    def handle_edit_painting_title(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ä—Ç–∏–Ω—ã"""
        user_id = message.from_user.id
        if user_id not in self.user_states:
            return
        
        try:
            painting_id = self.user_states[user_id]['painting_id']
            new_title = message.text
            
            if self.db.edit_painting(painting_id, 'title', new_title):
                self.bot.reply_to(message, "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ! üé®")
            else:
                self.bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è.")
        except Exception as e:
            self.bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è.")
        finally:
            del self.user_states[user_id]

    def handle_edit_painting_description(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è –∫–∞—Ä—Ç–∏–Ω—ã"""
        user_id = message.from_user.id
        if user_id not in self.user_states:
            return
        
        try:
            painting_id = self.user_states[user_id]['painting_id']
            new_description = message.text
            
            if self.db.edit_painting(painting_id, 'description', new_description):
                self.bot.reply_to(message, "–û–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ! üé®")
            else:
                self.bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è.")
        except Exception as e:
            self.bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è.")
        finally:
            del self.user_states[user_id]

    def handle_edit_painting_year(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –≥–æ–¥–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç–∏–Ω—ã"""
        user_id = message.from_user.id
        if user_id not in self.user_states:
            return
        
        try:
            new_year = int(message.text)
            painting_id = self.user_states[user_id]['painting_id']
            
            if self.db.edit_painting(painting_id, 'year', new_year):
                self.bot.reply_to(message, "–ì–æ–¥ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç–∏–Ω—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω! üé®")
            else:
                self.bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≥–æ–¥–∞.")
        except ValueError:
            self.bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≥–æ–¥.")
            return
        except Exception as e:
            self.bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≥–æ–¥–∞.")
        finally:
            del self.user_states[user_id] 
